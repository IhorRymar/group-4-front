{"version":3,"file":"static/js/930.e5f5dbea.chunk.js","mappings":"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","sources":["components/HomeTab/EmptyContainer/EmptyContainer.jsx","components/HomeTab/categories.jsx","components/HomeTab/MobileCard/MobileCard.jsx","components/HomeTab/TabletTab/TabletTab.jsx","redux/transactions/transactions-selector.js","components/HomeTab/columns.js","components/HomeTab/HomeTab.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport baseVars from \"stylesheet/vars\";\n\nexport const EmptyContainer = () => { \n    return (\n        <Container>\n            <Text>No transactions</Text>\n        </Container>\n    )\n}\nconst Container = styled.div`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin: 0 auto;\nbackground-color: transparent;\n/* border: 1px solid #DCDCDF; */\n@media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    width:280px;\n    height:282px;}\n@media screen and (min-width: ${baseVars.sizeScreen.tablet}) {\n   width:704px;\n  height:312px;\n  }\n@media screen and (min-width: ${baseVars.sizeScreen.desktop}) {\n  width: 715px;\n  }\n`;\nconst Text = styled.p`\n   font-family: ${ baseVars.fonts.main};\nfont-style: normal;\nfont-weight: 700;\nfont-size: 30px;\nline-height: 18px;\ncolor: #DCDCDF; \n`;\n","export const Categories = id => {\n  switch (id) {\n    case 0:\n      return  \"Main expenses\";\n    case 1:\n      return \"Products\";\n     case 2:\n      return \"Car\";\n    case 3:\n      return \"Self care\";\n     case 4:\n      return \"Child care\";\n    case 5:\n      return \"Household products\";\n     case 6:\n      return \"Education\";\n    case 7:\n      return \"Leisure\";\n     case 8:\n      return \"Entertainment\";\n    case 9:\n      return \"Help UA Armed Force\";\n    case 999:\n      return \"Other expenses\";\n    default:\n      return \"---\";\n  }\n};\n","import styled from \"styled-components\";\nimport PropTypes from 'prop-types';\nimport baseVars from \"stylesheet/vars\";\nimport { EmptyContainer } from \"../EmptyContainer/EmptyContainer\";\nimport moment from 'moment';\nimport { Categories } from \"../categories\";\nimport EllipsisText from \"react-ellipsis-text\";\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTransactions, removeTransaction } from 'redux/transactions/transactions-operation';\nimport { Delete } from \"@mui/icons-material\";\n\nconst MobileCard = ({ items}) => {\n  const dispatch = useDispatch();\n\n  const onRemoveTransaction = (id) => {\n    dispatch(removeTransaction(id));\n  }\n\n  const transactions = useSelector(state => state.transactions.items);\n\n  useEffect(() => {\n    dispatch(fetchTransactions(1));\n  }, [dispatch, transactions.transactionsTotalQuantity]);\n\n  return (\n  <>\n      {\n        items?.length !== 0 ?\n          <TransactionContainer>\n            {items?.map(({ date, transactionType, category, comment, amount, balance, _id }) => (\n              <TransactionList key={_id} color={transactionType}>\n                <ListItems><TitleItems>Date</TitleItems><TextItems>{moment.utc(date).format('DD.MM.YY')}</TextItems></ListItems>\n                <ListItems><TitleItems>Type</TitleItems>{transactionType === \"income\" ? <TextItems>+</TextItems> : <TextItems>-</TextItems>} </ListItems>\n                <ListItems><TitleItems>Category</TitleItems><TextItems>{Categories(category)}</TextItems></ListItems>\n                <ListItems><TitleItems>Comment</TitleItems><TextItems><EllipsisText text={`${comment  || \"---\"}`} length={17} tooltip=\"true\" /></TextItems></ListItems>\n                <ListItems><TitleItems>Sum</TitleItems>\n                  {transactionType === \"income\" ?\n                    <SumText style={{ color: \"#24CCA7\" }}>{amount.toFixed(2)}</SumText> :\n                    <SumText style={{ color: \"#FF6596\" }}>{amount.toFixed(2)}</SumText>}</ListItems>\n                <ListItems><TitleItems>Balance</TitleItems><TextItems>{balance.toFixed(2)}</TextItems></ListItems>\n                <ListItems>\n                  <Button onClick={() => onRemoveTransaction(_id)}>\n                    <Delete sx={{\n                      color: '#fff',\n                      transform: 'scale(0.8)',\n                    }} />\n                  </Button>\n                </ListItems>\n              </TransactionList>\n            ))}\n\n          </TransactionContainer> : <EmptyContainer />}\n\n  </> )\n}\nMobileCard.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        transactionType: PropTypes.string.isRequired,\n        category: PropTypes.number,\n        comment: PropTypes.string,\n        amount: PropTypes.number.isRequired,\n        balance: PropTypes.number.isRequired,\n    }),\n  ),\n};\nexport default MobileCard;\n\nconst borderColor = type => {\n  switch (type) {\n    case 'expense':\n      return `${ baseVars.colors.expensesText}`;\n    case 'income':\n      return `${ baseVars.colors.incomeText}`;\n    default:\n      return `${ baseVars.colors.secondText}`;\n  }\n};\n\nconst TransactionContainer = styled.div`\n  @media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    display:flex;\n    flex-direction: column;\n    align-items:center;\n  }  \n`;\n\nconst TransactionList = styled.ul`\n@media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    box-sizing: border-box;\n    width:280px;\n    list-style: none;\n    padding: 0px;\n    border-radius:5px ;\n    margin: 0px 20px 8px 20px;\n    background-color: ${ baseVars.colors.secondText};\n    border-left: 5px solid ;\n    border-color: ${({ color }) => borderColor(color) }; \n}        \n`;\nconst ListItems = styled.li`\n@media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    display:flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 12px 20px 8px 20px;\n\n    :not(:last-child) {\n        border-bottom: 1px solid #DCDCDF;\n    }\n    :not(:first-child) {\n        padding-top:12px;\n        padding-bottom:8px;\n    }\n    :last-child {\n      padding-top: 8px;\n      justify-content: flex-end;\n    }\n} \n`;\n\nconst TitleItems = styled.span`\n@media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    font-family: ${ baseVars.fonts.main};\nfont-style: normal;\nfont-weight: 700;\nfont-size: 18px;\nline-height: 27px;\ncolor: ${ baseVars.colors.mainText};\n}\n`\nconst TextItems = styled(TitleItems)`\n@media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\nfont-weight: 400;\nfont-size: 16px;\nline-height: 24px;\ntext-align: right;\n}\n`;\n\nconst SumText = styled(TextItems)`\n@media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    font-weight: 700;\n}\n`;\n\nconst Button = styled.button`\n  display: flex;\n  width: 24px;\n  height: 24px;\n  padding: 0;\n  border: none;\n  border-radius: 2px;\n  background-color: ${baseVars.colors.icon} ;\n  margin: 0;\n`;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport baseVars from 'stylesheet/vars';\nimport { React } from 'react';\nimport { EmptyContainer } from '../EmptyContainer/EmptyContainer';\nimport moment from 'moment';\nimport { Categories } from '../categories';\nimport EllipsisText from 'react-ellipsis-text';\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTransactions, removeTransaction } from 'redux/transactions/transactions-operation';\nimport { Delete } from \"@mui/icons-material\";\n\nconst TabletTab = ({ items, columns }) => {\n  const dispatch = useDispatch();\n\n  const onRemoveTransaction = (id) => {\n    dispatch(removeTransaction(id));\n  }\n\n  const transactions = useSelector(state => state.transactions.items);\n\n  useEffect(() => {\n    dispatch(fetchTransactions(1));\n  }, [dispatch, transactions.transactionsTotalQuantity]);\n\n  return (\n    <>\n      <GeneralContainer>\n        <table>\n          <HeadContainer>\n            <HeadList>\n              {columns.map(colum => (\n                <HeadTitles key={colum.accessor}>{colum.Header} </HeadTitles>\n              ))}\n            </HeadList>\n          </HeadContainer>\n        </table>\n        {items?.length !== 0 ? (\n          <BodyTable>\n            <Tbody>\n              {items?.map(({\n                date,\n                transactionType,\n                category,\n                comment,\n                amount,\n                balance,\n                _id,\n              }) => (\n                <BodyList key={_id}>\n                  <BodyItems>\n                    {moment.utc(date).format('DD.MM.YY')}\n                  </BodyItems>\n                  <BodyItems>\n                    {transactionType === 'income' ? '+' : '-'}\n                  </BodyItems>\n                  <BodyItems>{Categories(category)}</BodyItems>\n                  <BodyItems>\n                    <EllipsisText\n                      text={`${comment || '---'}`}\n                      length={24}\n                      tooltip=\"true\"\n                    />\n                  </BodyItems>\n                  <BodyItems>\n                    {transactionType === 'income' ? (\n                      <SpanSum\n                        style={{ color: `${baseVars.colors.incomeText}` }}\n                      >\n                        {amount.toFixed(2)}\n                        </SpanSum>\n                    ) : (\n                      <SpanSum\n                        style={{ color: `${baseVars.colors.expensesText}` }}\n                      >\n                        {amount.toFixed(2)}\n                      </SpanSum>\n                    )}\n                  </BodyItems>\n                  <BodyItems>{balance.toFixed(2)}</BodyItems>\n                  <BodyItems>\n                    <Button onClick={() => onRemoveTransaction(_id)}>\n                      <Delete sx={{\n                        color: '#fff',\n                        transform: 'scale(0.8)',\n                      }} />\n                    </Button>\n                  </BodyItems>\n                </BodyList>\n                )\n              )}\n            </Tbody>\n          </BodyTable>\n      ) : (\n        <EmptyContainer />\n        )}\n      </GeneralContainer>\n    </>\n  );\n};\n\nTabletTab.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      transactionType: PropTypes.string.isRequired,\n      category: PropTypes.number,\n      comment: PropTypes.string,\n      amount: PropTypes.number.isRequired,\n      balance: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default TabletTab;\n\nconst GeneralContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  @media screen and (min-width: ${baseVars.sizeScreen.tablet}) {\n    width: 704px;\n    background-color: transparent;\n  }\n  @media screen and (min-width: ${baseVars.sizeScreen.desktop}) {\n    width: 715px;\n  }\n`;\nconst HeadContainer = styled.thead`\n  display: table-caption;\n  box-sizing: border-box;\n  height: 58px;\n  background-color: ${baseVars.colors.secondText};\n  padding: 16px 20px 15px 20px;\n  border-radius: 30px;\n`;\nconst HeadList = styled.tr`\n  display: flex;\n  justify-content: space-between;\n`;\nconst HeadTitles = styled.th`\n  font-family: ${baseVars.fonts.main};\n  font-style: normal;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 27px;\n  text-align: start;\n  color: ${baseVars.colors.mainText};\n\n  :first-child {\n    width: 55px\n  }\n  :nth-child(2) {\n    width: 65px;\n    text-align: center;\n  }\n  :nth-child(3) {\n    width: 135px;\n  }\n  :nth-child(4) {\n    width: 105px;\n  }\n  :nth-child(5) {\n    width: 85px;\n    text-align: right;\n  }\n  :nth-child(6) {\n    width: 85px;\n    text-align: right;\n    margin-right: 45px;\n  }\n`;\n\nconst BodyTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst Tbody = styled.tbody`\n\n`;\n\nconst BodyList = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  font-family: ${baseVars.fonts.main};\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${baseVars.colors.mainText};\n  padding-top: 14px;\n  padding-bottom: 14px;\n\n  :first-child {\n    padding-top: 16px;\n  }\n  :not(:last-child) {\n    border-bottom: 1px solid #dcdcdf;\n  }\n`;\nconst BodyItems = styled.td`\n  text-align: start;\n\n  :first-child {\n    width: 75px;\n    padding-left: 20px;\n  }\n  :nth-child(2) {\n    width: 65px;\n    text-align: center;\n  }\n  :nth-child(3) {\n    width: 135px;\n  }\n  :nth-child(4) {\n    width: 105px;\n  }\n  :nth-child(5) {\n    width: 85px;\n    text-align: right;\n  }\n  :nth-child(6) {\n    width: 85px;\n    text-align: right;\n  }\n  :hover {\n    z-index: 1;\n    overflow: visible;\n  }\n`;\n\nconst SpanSum = styled.span`\n  font-weight: 700;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  width: 24px;\n  height: 24px;\n  padding: 0;\n  border: none;\n  border-radius: 2px;\n  background-color: ${baseVars.colors.icon} ;\n  margin: 0;\n  margin-right: 20px;\n`;\n","export const getTransactions = ({ transactions }) => transactions.items;\n","export const COLUMNS = [\n  {\n    Header: \"Date\",\n    accessor: \"date\",\n  },\n  {\n    Header: \"Type\",\n    accessor: \"type\",\n  },\n  {\n    Header: \"Category\",\n    accessor: \"category\",\n  },\n  {\n    Header: \"Comment\",\n    accessor: \"comment\",\n  },\n  {\n    Header: \"Sum\",\n   accessor: \"sum\",\n  },\n  {\n    Header: \"Balance\",\n    accessor: \"balance\"\n  },\n];","import { React, Fragment,useEffect, useMemo, useState } from \"react\";\nimport MobileCard from \"./MobileCard/MobileCard\";\nimport TabletTab from \"./TabletTab/TabletTab\";\nimport Media from 'react-media';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTransactions} from 'redux/transactions/transactions-operation';\nimport { getTransactions } from 'redux/transactions/transactions-selector';\nimport { COLUMNS } from './columns'\nimport { Pagination } from '@mui/material';\nimport styled from 'styled-components';\nimport baseVars from 'stylesheet/vars';\n\n\nconst HomeTab = () => { \n  const [page, setPage] = useState(1);\n  const [transactionsPerPage] = useState(10);\n  const columns = useMemo(() => COLUMNS, []);\n  const { result: data, transactionsTotalQuantity } = useSelector(getTransactions);\n  \n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // console.log(page + \"!!!\")\n    dispatch(fetchTransactions(page));\n  }, [dispatch, page]);\n  \n\n  const handleChange = (e, page) => {\n  setPage(page)\n}\n  const totalPages = Math.ceil(transactionsTotalQuantity / transactionsPerPage)\n  const totalPagesInteger =  totalPages ? totalPages : 1\n  // console.log(totalPages)\n  \n  return (\n      <Con>\n            <Media queries={{\n          small: \"(max-width: 767px)\",\n          medium: \"(min-width: 768px) and (max-width: 1279px)\",\n          large: \"(min-width: 1280px)\"\n            }}>\n                {matches => (\n            <Fragment>\n              {matches.small && <MobileCard items={data} columns={columns} />}\n            {matches.medium && <TabletTab items={data} columns={columns}   />}\n            {matches.large && <TabletTab items={data} columns={columns} />}\n            {(transactionsTotalQuantity > 10) ? <Paginate  count={totalPagesInteger} page={page} onChange={handleChange} /> : null }\n            </Fragment>\n          )}\n      </Media>\n    \n    \n    </Con>\n    )\n}\n\nexport default HomeTab\n\nconst Con = styled.div`\n  display:flex;\n  \n  flex-direction: column;\n  @media screen and (min-width: ${baseVars.sizeScreen.desktop}) {\n    padding-top: 32px;\n    align-items: flex-end;\n  }\n`\nconst Paginate = styled(Pagination)`\n  display:flex;\n  justify-content: center;\n  margin-top: 20px;\n  @media screen and (min-width: ${baseVars.sizeScreen.mobile}) {\n    width:280px;}\n  @media screen and (min-width: ${baseVars.sizeScreen.tablet}) {\n    width: 704px;}\n    @media screen and (min-width: ${baseVars.sizeScreen.desktop}) {\n    width: 715px;}\n`"],"names":["EmptyContainer","Container","Text","styled","baseVars","Categories","id","items","dispatch","useDispatch","transactions","useSelector","state","useEffect","fetchTransactions","transactionsTotalQuantity","length","TransactionContainer","map","date","transactionType","category","comment","amount","balance","_id","TransactionList","color","ListItems","TitleItems","TextItems","moment","format","text","tooltip","SumText","style","toFixed","Button","onClick","removeTransaction","Delete","sx","transform","type","borderColor","columns","GeneralContainer","HeadContainer","HeadList","colum","HeadTitles","Header","accessor","BodyTable","Tbody","BodyList","BodyItems","SpanSum","getTransactions","COLUMNS","useState","page","setPage","transactionsPerPage","useMemo","data","result","handleChange","e","totalPages","Math","ceil","totalPagesInteger","Con","queries","small","medium","large","matches","Fragment","Paginate","count","onChange","Pagination"],"sourceRoot":""}